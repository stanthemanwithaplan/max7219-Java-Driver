package uk.co.somestuff.WallDisplay.Driver;

import java.util.Arrays;

/**
 * Last Edited 9th April 2020 17:33
 * @author Stanley Julius-Sadler
 **/

public class Font {

    /** Bit pattern for LCD_FONT courtesy of http://www.avrfreaks.net/forum/code-57-512-and-712-fonts?name=PNphpBB2&file=viewtopic&t=69880 **/
    public static short[][] LCD_FONT = {
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x00
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x01
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x02
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x03
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x04
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x05
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x06
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x07
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x08
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x09
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x0A
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x0B
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x0C
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x0D
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x0E
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x0F
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x10
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x11
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x12
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x13
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x14
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x15
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x16
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x17
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x18
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x19
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x1A
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x1B
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x1C
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x1D
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x1E
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0x1F
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // ' '
            {0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00},  // '!'
            {0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00},  // '"'
            {0x14, 0x7f, 0x14, 0x7f, 0x14, 0x00, 0x00, 0x00},  // '//'
            {0x24, 0x2a, 0x7f, 0x2a, 0x12, 0x00, 0x00, 0x00},  // '$'
            {0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00, 0x00},  // '%'
            {0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00, 0x00},  // '&'
            {0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},  // "'"
            {0x00, 0x1c, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00},  // '('
            {0x00, 0x41, 0x22, 0x1c, 0x00, 0x00, 0x00, 0x00},  // ')'
            {0x14, 0x08, 0x3e, 0x08, 0x14, 0x00, 0x00, 0x00},  // '*'
            {0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00, 0x00},  // '+'
            {0x00, 0x50, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00},  // '
            {0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00},  // '-'
            {0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00},  // '.'
            {0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00},  // '/'
            {0x3e, 0x51, 0x49, 0x45, 0x3e, 0x00, 0x00, 0x00},  // '0'
            {0x00, 0x42, 0x7f, 0x40, 0x00, 0x00, 0x00, 0x00},  // '1'
            {0x42, 0x61, 0x51, 0x49, 0x46, 0x00, 0x00, 0x00},  // '2'
            {0x21, 0x41, 0x45, 0x4b, 0x31, 0x00, 0x00, 0x00},  // '3'
            {0x18, 0x14, 0x12, 0x7f, 0x10, 0x00, 0x00, 0x00},  // '4'
            {0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00, 0x00},  // '5'
            {0x3c, 0x4a, 0x49, 0x49, 0x30, 0x00, 0x00, 0x00},  // '6'
            {0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00, 0x00},  // '7'
            {0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00},  // '8'
            {0x06, 0x49, 0x49, 0x29, 0x1e, 0x00, 0x00, 0x00},  // '9'
            {0x00, 0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00},  // ':'
            {0x00, 0x56, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00},  // ';'
            {0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00},  // '<'
            {0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00},  // '='
            {0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, 0x00},  // '>'
            {0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00, 0x00},  // '?'
            {0x32, 0x49, 0x79, 0x41, 0x3e, 0x00, 0x00, 0x00},  // '@'
            {0x7e, 0x11, 0x11, 0x11, 0x7e, 0x00, 0x00, 0x00},  // 'A'
            {0x7f, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00},  // 'B'
            {0x3e, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00, 0x00},  // 'C'
            {0x7f, 0x41, 0x41, 0x22, 0x1c, 0x00, 0x00, 0x00},  // 'D'
            {0x7f, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00, 0x00},  // 'E'
            {0x7f, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00, 0x00},  // 'F'
            {0x3e, 0x41, 0x49, 0x49, 0x7a, 0x00, 0x00, 0x00},  // 'G'
            {0x7f, 0x08, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x00},  // 'H'
            {0x00, 0x41, 0x7f, 0x41, 0x00, 0x00, 0x00, 0x00},  // 'I'
            {0x20, 0x40, 0x41, 0x3f, 0x01, 0x00, 0x00, 0x00},  // 'J'
            {0x7f, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00},  // 'K'
            {0x7f, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00},  // 'L'
            {0x7f, 0x02, 0x0c, 0x02, 0x7f, 0x00, 0x00, 0x00},  // 'M'
            {0x7f, 0x04, 0x08, 0x10, 0x7f, 0x00, 0x00, 0x00},  // 'N'
            {0x3e, 0x41, 0x41, 0x41, 0x3e, 0x00, 0x00, 0x00},  // 'O'
            {0x7f, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00, 0x00},  // 'P'
            {0x3e, 0x41, 0x51, 0x21, 0x5e, 0x00, 0x00, 0x00},  // 'Q'
            {0x7f, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00, 0x00},  // 'R'
            {0x46, 0x49, 0x49, 0x49, 0x31, 0x00, 0x00, 0x00},  // 'S'
            {0x01, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x00, 0x00},  // 'T'
            {0x3f, 0x40, 0x40, 0x40, 0x3f, 0x00, 0x00, 0x00},  // 'U'
            {0x1f, 0x20, 0x40, 0x20, 0x1f, 0x00, 0x00, 0x00},  // 'V'
            {0x3f, 0x40, 0x38, 0x40, 0x3f, 0x00, 0x00, 0x00},  // 'W'
            {0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00, 0x00},  // 'X'
            {0x07, 0x08, 0x70, 0x08, 0x07, 0x00, 0x00, 0x00},  // 'Y'
            {0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00, 0x00},  // 'Z'
            {0x00, 0x7f, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00},  // '{'
            {0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, 0x00},  // backslash
            {0x00, 0x41, 0x41, 0x7f, 0x00, 0x00, 0x00, 0x00},  // '
            {0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00},  // '^'
            {0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00},  // '_'
            {0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00},  // '`'
            {0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00, 0x00},  // 'a'
            {0x7f, 0x48, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00},  // 'b'
            {0x38, 0x44, 0x44, 0x44, 0x20, 0x00, 0x00, 0x00},  // 'c'
            {0x38, 0x44, 0x44, 0x48, 0x7f, 0x00, 0x00, 0x00},  // 'd'
            {0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00, 0x00},  // 'e'
            {0x08, 0x7e, 0x09, 0x01, 0x02, 0x00, 0x00, 0x00},  // 'f'
            {0x0c, 0x52, 0x52, 0x52, 0x3e, 0x00, 0x00, 0x00},  // 'g'
            {0x7f, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00, 0x00},  // 'h'
            {0x00, 0x44, 0x7d, 0x40, 0x00, 0x00, 0x00, 0x00},  // 'i'
            {0x20, 0x40, 0x44, 0x3d, 0x00, 0x00, 0x00, 0x00},  // 'j'
            {0x7f, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00},  // 'k'
            {0x00, 0x41, 0x7f, 0x40, 0x00, 0x00, 0x00, 0x00},  // 'l'
            {0x7c, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00, 0x00},  // 'm'
            {0x7c, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00, 0x00},  // 'n'
            {0x38, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00},  // 'o'
            {0x7c, 0x14, 0x14, 0x14, 0x08, 0x00, 0x00, 0x00},  // 'p'
            {0x08, 0x14, 0x14, 0x18, 0x7c, 0x00, 0x00, 0x00},  // 'q'
            {0x7c, 0x08, 0x04, 0x04, 0x08, 0x00, 0x00, 0x00},  // 'r'
            {0x48, 0x54, 0x54, 0x54, 0x20, 0x00, 0x00, 0x00},  // 's'
            {0x04, 0x3f, 0x44, 0x40, 0x20, 0x00, 0x00, 0x00},  // 't'
            {0x3c, 0x40, 0x40, 0x20, 0x7c, 0x00, 0x00, 0x00},  // 'u'
            {0x1c, 0x20, 0x40, 0x20, 0x1c, 0x00, 0x00, 0x00},  // 'v'
            {0x3c, 0x40, 0x30, 0x40, 0x3c, 0x00, 0x00, 0x00},  // 'w'
            {0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00},  // 'x'
            {0x0c, 0x50, 0x50, 0x50, 0x3c, 0x00, 0x00, 0x00},  // 'y'
            {0x44, 0x64, 0x54, 0x4c, 0x44, 0x00, 0x00, 0x00},  // 'z'
            {0x00, 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x00},  // '{'
            {0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00},  // '|'
            {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},  // '}'
            {0x10, 0x08, 0x08, 0x10, 0x08, 0x00, 0x00, 0x00},  // '~'
            {0x00, 0x00, 0x02, 0x05, 0x02, 0x00, 0x00, 0x00},  // 0x7F
            {0x44, 0x7c, 0x54, 0x14, 0x08, 0x00, 0x00, 0x00},  // 0x80   p
            {0x38, 0x44, 0x44, 0x44, 0x28, 0x00, 0x00, 0x00},  // 0x81   c
            {0x04, 0x04, 0x7c, 0x04, 0x04, 0x00, 0x00, 0x00},  // 0x82   т
            {0x8c, 0x50, 0x20, 0x10, 0x0C, 0x00, 0x00, 0x00},  // 0x83   у
            {0x18, 0x24, 0xfc, 0x24, 0x18, 0x00, 0x00, 0x00},  // 0x84   ф
            {0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00},  // 0x85   x
            {0x7c, 0x40, 0x40, 0x40, 0xfc, 0x00, 0x00, 0x00},  // 0x86   ц
            {0x0c, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00, 0x00},  // 0x87   ч
            {0x7c, 0x40, 0x7c, 0x40, 0x7c, 0x00, 0x00, 0x00},  // 0x88   ш
            {0x7c, 0x40, 0x7c, 0x40, 0xfc, 0x00, 0x00, 0x00},  // 0x89   щ
            {0x04, 0x7c, 0x50, 0x50, 0x20, 0x00, 0x00, 0x00},  // 0x8A   ъ
            {0x7c, 0x50, 0x50, 0x20, 0x7c, 0x00, 0x00, 0x00},  // 0x8B   ы
            {0x7c, 0x50, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00},  // 0x8C   ь
            {0x28, 0x44, 0x54, 0x54, 0x38, 0x00, 0x00, 0x00},  // 0x8D   э
            {0x7c, 0x10, 0x38, 0x44, 0x38, 0x00, 0x00, 0x00},  // 0x8E   ю
            {0x08, 0x54, 0x34, 0x14, 0x7c, 0x00, 0x00, 0x00},  // 0x8F   я
            {0x7e, 0x11, 0x11, 0x11, 0x7e, 0x00, 0x00, 0x00},  // 0x90   A
            {0x7f, 0x49, 0x49, 0x49, 0x33, 0x00, 0x00, 0x00},  // 0x91   Б
            {0x7f, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00},  // 0x92   В
            {0x41, 0x7f, 0x41, 0x01, 0x03, 0x00, 0x00, 0x00},  // 0x93   Г
            {0xe0, 0x51, 0x4f, 0x41, 0xff, 0x00, 0x00, 0x00},  // 0x94   Д
            {0x7f, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00, 0x00},  // 0x95   E
            {0x77, 0x08, 0x7f, 0x08, 0x77, 0x00, 0x00, 0x00},  // 0x96   Ж
            {0x41, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00},  // 0x97   З
            {0x7f, 0x10, 0x08, 0x04, 0x7f, 0x00, 0x00, 0x00},  // 0x98   И
            {0x7f, 0x10, 0x09, 0x04, 0x7f, 0x00, 0x00, 0x00},  // 0x99   Й
            {0x7f, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00},  // 0x9A   K
            {0x20, 0x41, 0x3f, 0x01, 0x7f, 0x00, 0x00, 0x00},  // 0x9B   Л
            {0x7f, 0x02, 0x0c, 0x02, 0x7f, 0x00, 0x00, 0x00},  // 0x9C   M
            {0x7f, 0x08, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x00},  // 0x9D   H
            {0x3e, 0x41, 0x41, 0x41, 0x3e, 0x00, 0x00, 0x00},  // 0x9E   O
            {0x7f, 0x01, 0x01, 0x01, 0x7f, 0x00, 0x00, 0x00},  // 0x9F   П
            {0x41, 0x7f, 0x49, 0x09, 0x06, 0x00, 0x00, 0x00},  // 0xA0   P
            {0x3e, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00, 0x00},  // 0xA1   C
            {0x01, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x00, 0x00},  // 0xA2   T
            {0x47, 0x28, 0x10, 0x08, 0x07, 0x00, 0x00, 0x00},  // 0xA3   У
            {0x0e, 0x11, 0x7f, 0x11, 0x0e, 0x00, 0x00, 0x00},  // 0xA4   Ф
            {0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00, 0x00},  // 0xA5   X
            {0x7f, 0x40, 0x40, 0x40, 0xff, 0x00, 0x00, 0x00},  // 0xA6   Ц
            {0x07, 0x08, 0x08, 0x08, 0x7f, 0x00, 0x00, 0x00},  // 0xA7   Ч
            {0x7f, 0x40, 0x7f, 0x40, 0x7f, 0x00, 0x00, 0x00},  // 0xA8   Ш
            {0x7f, 0x40, 0x7f, 0x40, 0xff, 0x00, 0x00, 0x00},  // 0xA9   Щ
            {0x01, 0x7f, 0x48, 0x48, 0x30, 0x00, 0x00, 0x00},  // 0xAA   Ъ
            {0x7f, 0x48, 0x30, 0x00, 0x7f, 0x00, 0x00, 0x00},  // 0xAB   Ы
            {0x00, 0x7f, 0x48, 0x48, 0x30, 0x00, 0x00, 0x00},  // 0xAC   Э
            {0x22, 0x41, 0x49, 0x49, 0x3e, 0x00, 0x00, 0x00},  // 0xAD   Ь
            {0x7f, 0x08, 0x3e, 0x41, 0x3e, 0x00, 0x00, 0x00},  // 0xAE   Ю
            {0x46, 0x29, 0x19, 0x09, 0x7f, 0x00, 0x00, 0x00},  // 0xAF   Я
            {0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00},  // 0xB0   °
            {0x3c, 0x4a, 0x4a, 0x4a, 0x31, 0x00, 0x00, 0x00},  // 0xB1   б
            {0x7c, 0x54, 0x54, 0x28, 0x00, 0x00, 0x00, 0x00},  // 0xB2   в
            {0x44, 0x7c, 0x44, 0x0c, 0x00, 0x00, 0x00, 0x00},  // 0xB3   г
            {0xe0, 0x54, 0x4c, 0x44, 0xfc, 0x00, 0x00, 0x00},  // 0xB4   д
            {0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00, 0x00},  // 0xB5   e
            {0x6c, 0x10, 0x7c, 0x10, 0x6c, 0x00, 0x00, 0x00},  // 0xB6   ж
            {0x44, 0x44, 0x54, 0x54, 0x28, 0x00, 0x00, 0x00},  // 0xB7   з
            {0x7c, 0x20, 0x10, 0x08, 0x7c, 0x00, 0x00, 0x00},  // 0xB8   и
            {0x7c, 0x21, 0x12, 0x09, 0x7c, 0x00, 0x00, 0x00},  // 0xB9   й
            {0x7c, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00},  // 0xBA   к
            {0x20, 0x44, 0x3c, 0x04, 0x7c, 0x00, 0x00, 0x00},  // 0xBB   л
            {0x7c, 0x08, 0x10, 0x08, 0x7c, 0x00, 0x00, 0x00},  // 0xBC   м
            {0x7c, 0x10, 0x10, 0x10, 0x7c, 0x00, 0x00, 0x00},  // 0xBD   н
            {0x38, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00},  // 0xBE   o
            {0x7c, 0x04, 0x04, 0x04, 0x7c, 0x00, 0x00, 0x00},  // 0xBF   п
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC0
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC1
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC2
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC3
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC4
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC5
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC6
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC7
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC8
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xC9
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xCA
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xCB
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xCC
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xCD
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xCE
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xCF
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD0
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD1
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD2
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD3
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD4
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD5
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD6
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD7
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD8
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xD9
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xDA
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xDB
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xDC
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xDD
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xDE
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xDF
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE0
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE1
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE2
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE3
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE4
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE5
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE6
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE7
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE8
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xE9
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xEA
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xEB
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xEC
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xED
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xEE
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xEF
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF0
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF1
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF2
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF3
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF4
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF5
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF6
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF7
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF8
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xF9
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xFA
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xFB
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xFC
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xFD
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xFE
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  // 0xFF
    };

    public static short[] value(short[][] font, int asciiCode) {

        /** Sets up a short integer to count how many points there are in the character **/
        short numOfPointsThere = 0;

        /** Creates an array of 8 populated with 'false' **/
        boolean isPointThere[] = new boolean[8];

        /** Checks for special cases where the response is different, like SPACE which would be empty **/
        if (asciiCode == 32) {
            numOfPointsThere += 2;
            isPointThere[0] = true;
            isPointThere[1] = true;
        } else {

            /** Works through the columns of the letter and check weather the point is empty (0x00) or there is a point there,
             * if a point is empty it checks weather there is a valid point before or after, meaning if there was it would
             * be in the middle of say a 'O' **/
            for (int i = 0; i < font[asciiCode].length; i++) {
                if (font[asciiCode][i] == 0x00) {
                    boolean isPrev = false;
                    for (int u = i; u > i; u--) {
                        if (font[asciiCode][u] != 0x00) {
                            isPrev = true;
                        }
                    }
                    if (isPrev) {
                        isPointThere[i] = true;
                        numOfPointsThere += 1;
                    }
                } else {
                    isPointThere[i] = true;
                    numOfPointsThere += 1;
                }
            }
        }

        /** We now create an array the length of the valid points + 1 for the one dot space between letters **/
        short newLetter[] = new short[numOfPointsThere + 1];

        short nIndex = 0;
        /** Running through the array of valid points (isPointThere), if the point is valid (true) we add it to the new
         * letter list and add one onto the 'nIndex' to keep count **/
        for (int i = 0; i < isPointThere.length; i++) {
            if (isPointThere[i]) {
                newLetter[nIndex] = font[asciiCode][i];
                nIndex += 1;
            }
        }

        /** Setting the last position to a '0' which is the space at the end of each character **/
        newLetter[newLetter.length-1] = 0;

        return newLetter;
    }

}